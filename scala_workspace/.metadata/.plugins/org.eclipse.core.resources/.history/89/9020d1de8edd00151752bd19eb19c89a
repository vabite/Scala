package objsets

object prove {

    def splitAtHalf[T](l: List[T]):(List[T], List[T])=
      if(l.isEmpty) throw new Error("Empty list")
      else (l take l.length/2, l drop l.length/2) //> splitAtHalf: [T](l: List[T])(List[T], List[T])
      
    def merge(lt: List[Int], ls: List[Int]):List[Int]=
     (lt, ls) match {
       case (xs, List())=> xs
       case (List(), ys)=> ys
       case (x::xs, y::ys)=> {
       	if(x > y) x::merge(xs,ls)
       	else y::merge(lt,ys)}
     }                                            //> merge: (lt: List[Int], ls: List[Int])List[Int]
    
    def sort(l: List[Int])(f: (Int, Int)=>Boolean):List[Int]={
      val splitted = splitAtHalf(l)
      merge(splitted._1, splitted._2)
    }                                             //> sort: (l: List[Int])(f: (Int, Int) => Boolean)List[Int]
    
    val l=List(0,1,2,3)                           //> l  : List[Int] = List(0, 1, 2, 3)
    println("ciao", merge(splitAtHalf(l)._2, splitAtHalf(l)._1))
                                                  //> (ciao,List(2, 3, 0, 1))
 }