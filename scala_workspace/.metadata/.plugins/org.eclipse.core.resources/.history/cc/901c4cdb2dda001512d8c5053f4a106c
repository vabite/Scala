package week_three

trait List[T] {
  def isEmpty: Boolean
  def head: T
  def tail: List[T]
}

class Cons[T](val head: T, val tail: List[T]) extends List[T]{
  def isEmpty=false
}

class Nil[T] extends List[T]{
  def isEmpty=true
  def head: Nothing=throw new NoSuchElementException("Nil.head")
  def tail: Nothing=throw new NoSuchElementException("Nil.tail")
}

object list {
  def nth[T](n: Int, l:List[T]): T={
    if(l.isEmpty) throw new Error("List index out of range")
    else if(n==0) l.head
    else nth(n-1, l.tail)   
  }
   
  def main()={
    val l=week_three.List(1,2,3,4,5,6)
    nth[Int](0, l)
  }  
}