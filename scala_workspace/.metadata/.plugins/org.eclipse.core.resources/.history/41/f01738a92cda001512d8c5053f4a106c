package week_three

object list {
  
  
}

trait List[T] {
  def isEmpty: Boolean
  def head: T
  def tail: List[T]
  def nth(n: Int): T={
    def iter(i: Int, t: List[T]): T=
      if(t.isEmpty) throw new Error("List index out of range")
      else if(i==0) head
      else iter(i-1, t.tail)
    iter(n, this)    
  }
}

class Cons[T](val head: T, val tail: List[T]) extends List[T]{
  def isEmpty=false
}

class Nil[T] extends List[T]{
  def isEmpty=true
  def head: Nothing=throw new NoSuchElementException("Nil.head")
  def tail: Nothing=throw new NoSuchElementException("Nil.tail")
}