package week_three

object btree {
  
  abstract class InSet{
    def incl(x: Int): InSet
    def contains(x: Int): Boolean
    def union(other: InSet): InSet
  }
  
  class NotEmpty(elem: Int, left: InSet, right: InSet) extends InSet{
    
    def incl(x: Int): InSet=
      if(elem<x) new NotEmpty(elem, left incl x, right)
      else if(elem>x) new NotEmpty(elem, left, right incl x)
      else this
      
    def contains(x: Int): Boolean=
      if(elem<x) left contains x
      else if(elem>x) right contains x
      else true
      
    def union(other: InSet): InSet=
      other union left
  }
  
  class Empty() extends InSet{
    
    def incl(x: Int): InSet= new NotEmpty(x, new Empty(), new Empty())
    
    def contains(x: Int): Boolean=false
    
    def union(other: InSet): InSet= other
  }
  
}