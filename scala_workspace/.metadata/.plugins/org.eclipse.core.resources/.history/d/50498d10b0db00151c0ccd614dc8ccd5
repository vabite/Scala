package week_four

object pattern {
  class Expr{
    
    def showPar: String = (this match {case Sum(_,_) =>"("+this.show+")"  ; case _ =>this.show})
       
  	def show: String = this match {
  	  case Prod(e1, e2) => e1.showPar +" * "+ e2.showPar
  	    //val s1 = (e1 match {case Sum(_,_) =>"("+e1.show+")"  ; case _ =>e1.show})
  	    //val s2 = (e2 match {case Sum(_,_) =>"("+e2.show+")"  ; case _ =>e2.show}) 
    	case Sum(e1, e2) => e1.show+" + "+e2.show
    	case Number(n) => n.toString
    	case Var(id) => id
  	}
  }		
  case class Sum(e1: Expr, e2: Expr) extends Expr	
  case class Number(n: Int) extends Expr
  case class Var(id: String) extends Expr
  case class Prod(e1: Expr, e2: Expr) extends Expr
  
  def main(args: Array[String]): Unit = println(Sum(Sum(Number(5), Number(6)), Number(5)).show)
  
}