package objsets

object prove {

    def splitAtHalf[T](l: List[T]):(List[T], List[T])={
                                                  //> splitAtHalf: [T](l: List[T])(List[T], List[T])
      }
      
    def merge(lt: List[Int], ls: List[Int]):List[Int]=
     (lt, ls) match {
       case (xs, List())=> xs
       case (List(), ys)=> ys
       case (x::xs, y::ys)=> {
       	if(x > y) x::merge(xs,ls)
       	else y::merge(lt,ys)}
     }                                            //> merge: (lt: List[Int], ls: List[Int])List[Int]
    
    def sort(l: List[Int]):List[Int]={
    	val n=l.length/2
      if(n==0) l
      else {
      	val halves = (l take n, l drop n)
      	merge(sort(halves._1), sort(halves._2))
      }
    }                                             //> sort: (l: List[Int])List[Int]
    
    val l=List(0,1)                               //> l  : List[Int] = List(0, 1)
    println("ciao", sort(l))                      //> java.lang.StackOverflowError
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:19)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
                                                  //| 	at objsets.prove$$anonfun$main$1.sort$1(objsets.prove.scala:20)
 }