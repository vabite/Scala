package objsets

object prove {


      
    def merge(lt: List[Int], ls: List[Int]):List[Int]=
     (lt, ls) match {
       case (xs, List())=> xs
       case (List(), ys)=> ys
       case (x::xs, y::ys)=> {
       	if(x > y) x::merge(xs,ls)
       	else y::merge(lt,ys)}
     }                                            //> merge: (lt: List[Int], ls: List[Int])List[Int]
    
    def sort(l: List[Int]):List[Int]={
    	val n=l.length/2
      if(n==0) l
      else {
      	val halves = (l take n, l drop n)
      	merge(sort(halves._1), sort(halves._2))
      }
    }                                             //> sort: (l: List[Int])List[Int]
    
    val l=List(0,1,2,32,4,5,6)                    //> l  : List[Int] = List(0, 1, 2, 3, 4, 5, 6)
    println("ciao", sort(l))                      //> (ciao,List(6, 5, 4, 3, 2, 1, 0))
 }