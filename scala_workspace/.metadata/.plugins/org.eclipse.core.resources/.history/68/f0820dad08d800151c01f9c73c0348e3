package week_two

object tail_general {
  def reduce(facc:(Int, Int) => Int, acc0: Int, fnext: Int => Int, start: Int, end: Int): Int={
  	def loop(next: Int, acc: Int): Int=
  		if(next>end) acc
  		else loop(next+1, facc(acc, fnext(next)))
  	loop(start, 1)
  }                                               //> reduce: (facc: (Int, Int) => Int, fnext: Int => Int, acc0: Int, start: Int, 
	def product(f:Int => Int, start: Int, end: Int): Int = reduce( (x, y) => x*y, 1, f, start, end)
  def sum(f:Int => Int, start: Int, end: Int): Int = reduce( (x, y) => x+y, 0, f, start, end)
	def factorial(n: Int)= product(x => x, 1, n)     //> res0: Int = 1
	factorial(0)
}